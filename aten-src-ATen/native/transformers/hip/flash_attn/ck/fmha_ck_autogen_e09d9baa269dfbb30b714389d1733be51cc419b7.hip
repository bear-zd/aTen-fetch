// ==========================================
// THIS CODE IS AUTOGENERATED. DO NOT MODIFY.
// @generated
// ==========================================
// SPDX-License-Identifier: MIT
// Copyright (c) 2018-2024, Advanced Micro Devices, Inc. All rights reserved.

// auto generated by generate.py
#include <fmha_bwd.hpp>

using fmha_dtype_0 = ck_tile::fp16_t;

using fmha_bwd_convert_dq_trait_0 =
    ck_tile::TileFmhaBwdConvertQGradTraits<false, true, 2>;

using fmha_bwd_convert_dq_pipeline_problem_0 =
    ck_tile::BlockFmhaBwdConvertQGradPipelineProblem<
        typename FmhaBwdTypeConfig<fmha_dtype_0>::AccDataType,
        typename FmhaBwdTypeConfig<fmha_dtype_0>::QGradDataType,
        /* BlockSize = */ 256,
        64,
        64,
        256,
        false,
        false,
        fmha_bwd_convert_dq_trait_0>;

using fmha_bwd_convert_dq_0 =
    typename ck_tile::BlockFmhaBwdConvertQGrad<fmha_bwd_convert_dq_pipeline_problem_0>;

using fmha_bwd_convert_dq_kernel_0 =
    ck_tile::FmhaBwdConvertQGradKernel<fmha_bwd_convert_dq_0>;

using convert_dq_trait_0 = fmha_bwd_convert_dq_traits_<256,
                                                             ck_tile::fp16_t,
                                                             false,
                                                             false,
                                                             true,
                                                             false>;

#include <iostream>

template <>
float fmha_bwd_convert_dq_<convert_dq_trait_0>(const ck_tile::stream_config& s, fmha_bwd_args a)
{
    using k_ = fmha_bwd_convert_dq_kernel_0;
    if(s.log_level_ > 0)
        std::cout << ", " << k_::GetName() << std::flush;
    auto [kargs, grids]                    = fmha_bwd_convert_dq_create_kargs_and_grids<k_>(a);
    constexpr dim3 blocks                  = k_::BlockSize();
    constexpr ck_tile::index_t kBlockPerCu = k_::kBlockPerCu;
#if (defined(__gfx90a__) || defined(__gfx942__))
    return ck_tile::launch_kernel(
        s, ck_tile::make_kernel<blocks.x, kBlockPerCu>(k_{}, grids, blocks, 0, kargs));
#else
    return 0.0;
#endif
}

template <>
void fmha_bwd_convert_dq_oneshot_<convert_dq_trait_0>(const ck_tile::stream_config& s,
                                                            fmha_bwd_args a)
{
    using k_                               = fmha_bwd_convert_dq_kernel_0;
    auto [kargs, grids]                    = fmha_bwd_convert_dq_create_kargs_and_grids<k_>(a);
    constexpr dim3 blocks                  = k_::BlockSize();
    constexpr ck_tile::index_t kBlockPerCu = k_::kBlockPerCu;
#if (defined(__gfx90a__) || defined(__gfx942__))
    ck_tile::make_kernel<blocks.x, kBlockPerCu>(k_{}, grids, blocks, 0, kargs)(
        ck_tile::stream_config{s.stream_id_});
#endif
}

template <>
std::string fmha_bwd_convert_dq_get_name_<convert_dq_trait_0>()
{
    using k_ = fmha_bwd_convert_dq_kernel_0;
    return k_::GetName();
}
